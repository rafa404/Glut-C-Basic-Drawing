#include<windows.h>
#include<iostream>
#include<math.h>
#include <stdio.h>
#include<GL/gl.h>
#include <GL/glut.h>

using namespace std;

int X1, Y1, X2, Y2;

void MidpointLine(void)
{
    int dx = abs(X2 - X1), dy = abs(Y2 - Y1);
    int p = 2*dy - dx;
    int twoDy = 2 * dy, twoDyDx = 2 * (dy - dx);
    int x, y, xEnd;

    if (X1 > X2) {
        x = X2;
        y = Y2;
        xEnd = X1;
    } else {
        x = X1;
        y = Y1;
        xEnd = X2;
    }

    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_POINTS);
        glVertex2d(x, y);
        while (x < xEnd) {
            x++;
            if (p < 0)
                p += twoDy;
            else {
                y++;
                p += twoDyDx;
            }
            glVertex2d(x, y);
        }
    glEnd();
    glFlush();
}


/*
void DDA(void)
{
    double dx = (X2 - X1), dy = (Y2 - Y1), l, m;
    float xInc, yInc, x = X1, y = Y1;

    m = dy/dx; //slope

    //xInc = 1;
    //yInc = dy / l;

    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_POINTS);
        glVertex2d(x, y);
        for (int i = 0; i < X2; i++)
        {
            x = x + 1;
            y = y + m;
            glVertex2d(x, round(y));
        }
    glEnd();
    glFlush();
}*/

void myInit(void)
{
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glColor3f(0.0f, 0.0f, 0.0f);
    glPointSize(4.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 640.0,0.0, 480.0);
}




int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(100, 150);
    glutCreateWindow("DDA LINE");

    cout << "Enter an initial points:\t";
    cin >> X1 >> Y1;
    cout << "Enter the final points:\t";
    cin >> X2 >> Y2;
    glutDisplayFunc(MidpointLine);
    myInit();
    glutMainLoop();

}



